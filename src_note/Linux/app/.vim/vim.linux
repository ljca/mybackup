if(g:islinux)
  " Source a global configuration file if available
  if filereadable(expand("/etc/vim/vimrc.local"))
    source /etc/vim/vimrc.local 
  endif
  "-------Ycm Configure-------"
  let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
  let g:ycm_key_invoke_completion = '<Tab><Leader>'
  let g:ycm_confirm_extra_conf=0
  let g:ycm_collect_identifiers_from_tags_files=0
  " 补全内容不以分割子窗口形式出现，只显示补全列表
  set completeopt-=preview
  " 从第一个键入字符就开始罗列匹配项
  let g:ycm_min_num_of_chars_for_completion=1
  " 禁止缓存匹配项，每次都重新生成匹配项
  let g:ycm_cache_omnifunc=0
  let g:ycm_complete_in_comments = 0
  let g:ycm_complete_in_strings = 0
  " 语法关键字补全
  let g:ycm_seed_identifiers_with_syntax=1
  let g:ycm_autoclose_preview_window_after_completion = 1 
  let g:ycm_autoclose_preview_window_after_insertion = 1 
  nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
  nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
  nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
  nnoremap <F4> :YcmDiags<CR>
  inoremap <c-o> <c-x><c-o>
  let g:ycm_semantic_triggers = { 
        \     'c' : ['->', '  ', '.', ' ', '(', '[', '&'],
        \     'cpp,objcpp' : ['->', '.', ' ', '(', '[', '&', '::'],
        \     'perl' : ['->', '::', ' '],
        \     'php' : ['->', '::', '.'],
        \     'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
        \     'ruby' : ['.', '::'],
        \     'lua' : ['.', ':']
        \ }
  highlight Pmenu ctermfg=white ctermbg=black
  highlight PmenuSel ctermfg=black ctermbg=white 
  "与系统共享剪贴板
  set clipboard+=unnamed
  "set tags+=/home/external/usr/src/linux-3.19/tags
endif
"bash-support cofiguretion
let g:BASH_Executeable		='/bin/bash'

" instant-markdown
let g:instant_markdown_slow = 1
let g:instant_markdown_allow_external_content = 1
let g:instant_markdown_autostart = 0

" Add syntax rule
"let g:markdown_quote_syntax_filetypes = {
"      \ "coffee" : {    "start" : "coffee", },
"      \ "css" : {    "start" : "\\%(css\\|scss\\)", },
"      \ "mustache" : {    "start" : "mustache", },
"      \ "haml" : {    "start" : "haml", },
"\}

" 'start' and 'end' is vim regular expression.
" need to care backslash.

" Add code blocks
"let g:markdown_quote_syntax_codeblocks = {
"        \["^\\s*{% *highlight \\+", "\\( .*%\\|%\\)}",
"          \"^\\s*{% *endhighlight\\( .*%\\|%\\)}"],
"\}

" Each codeblock is defined as:
"
"    'codeblock[0].filetype.codeblock[1]<code lines>codeblock[2]'
"
" Above example is for the liquid highlight tag. (It is already included by default.)
"    {% highlight vim %}
"    any codes
"    ...
"    {% endhighlight %}

" Add other file types in which quote syntax should be on.
"let g:markdown_quote_syntax_on_filetypes = ['text']
"let g:tagbar_type_markdown = {
"      \ 'ctagstype': 'markdown',
"      \ 'ctagsbin' : '~/.vim/markdown2ctags.py',
"      \ 'ctagsargs' : '-f - --sort=yes',
"      \ 'kinds' : [ 's:sections', 'i:images' ],
"      \ 'sro' : '|',
"      \ 'kind2scope' : {  's' : 'section',  },
"      \ 'sort': 0,
"\}
"let g:tagbar_type_markdown = {
"        \ 'ctagstype' : 'markdown',
"        \ 'kinds' : [
"                \ 'h:headings',
"        \ ],
"    \ 'sort' : 0
"\ }
"
"let g:tagbar_width = 25
"let g:tagbar_left = 1



" vim:set filetype=vim:"
